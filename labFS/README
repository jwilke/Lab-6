Graham Benevelli
grambo
grahambenevelli@gmail.com
grahambo

Jake Wilke
jlw3599
jake.wilke@gmail.com
jwilke

Slip Days used: 0

ActiveTransactionList.java
The list of Transaction that are not yet committed

ADisk.java
The disk itself. Can send reads and writes to disk.

ADiskTestThread.java
Testing thread, does numerous writes

CallbackTracker.java
Keeps back of what reads and writes are done

Common.java
Usefull functions and a write class

DirEnt.java
DirEnt is a class that will hold onto a single directory's information, including inumbers, names, and validity of the
things it points towards.

Disk.java
The base disk, provided by teacher

DiskCallback.java
Interface used by callbacktracker

DiskResult.java
Info passed back to callbacktracker

DiskUnit.java
Disk unit tests

DiskWorker.java
Get work from the disk and sends a finish to CallBackTracker

FlatFS.java
Flat file system uses PTree to handle files

InternalNode.java
The internal node of the tree that points to either data or other internal nodes

LogStatus.java
Manages the log on disk.

PTree.java
PTree manages the tree structure and the overhead of allocated space, including bit map

ResourceException.java
Used when there's no more room on the disk for another file.

RFS.java
Expands on the FlatFS by adding a hierarchical structure by creating files that represent directories.  It also adds
a layer of abstraction by providing a file descriptor, which allows the end user to keep track of a single number
instead of all the other overhead for editing a file.

SimpleLock.java
Our lock and condition variables

Tester.java
Unit tester, like junit

Transaction.java
Holds onto writes that need to go to disk

TransID.java
Holds the numeric value of the transaction, keeps them distinct

TNode.java
A structure to represent the Tree roots

WriteBackList.java
Holds onto the transaction that are committed but not necessarly on disk yet. 

WriteBackWorker.java
Takes transaction off the WritebackList and sends to disk. Also takes them off the list when done.


Part I design - The design starts with a transaction at the lowest level. IT contains writes that are going to disk, organized by sector. The ADisk creates one and sends it back to the user. Then using the id for the transaction the user can send writes or commit the writes. Before they are committed they are put ont he ActiveTransactionList, which holds them in a list and allows the user to add more writes to the included transactions. When the ADisk commits the transaction goes to the WriteBackList where it stays until the worker takes it off and sends it to disk. Also during the commit, the information of the Transactions are writen to a log on disk. The transaction can only be written after it is committed to the log.

Part II design - This handles and groups blocks into an ordered tree. The PTree holds onto up to 512 root nodes called TNodes. This are held, five in a sector for the first 103 sectors after the log. When you create, write or add to this trees you will read the information from the disk and construct a TNode object. This will then find the blocks in question to write to. If it has to look to InternalNodes it will also construct them. When it is done a bit is set in the bitmap to show that that sector has been used. 


Part III design - This manages files at a higher level.  To the end user, it references files by name instead of obscure numbers, making it easier to recognize.  Directories are introduced for organization.  They are represented by a single files who's data are pointers to other files and directories.  Other methods are added for ease of use, such as renaming and unlinking (deleting).  Whenever the RFS is created, a root directory is instantiated and all other files will be inside of it. Only one file can be opened, edited, and deleted at a time due to the restrictions of the FlatFS, trying to do more than that will result in a bad file descriptor.

Everything is made atomic by the restriction of one-file-at-a-time symantics.  All of the changes are made to a single transaction, which either occurs exactly at creation if you don't want to open the file, or when closing if you do want to edit the file.  And since the file relies on a single transaction, we truly rely on a transaction being atomic, which was ensured long ago in part I of the design.


3. We lock on the transaction class. In here we allow reads to read as much as they wont, until there is a write. When there is a write, then the reads have to wait. The two lists also lock. The writebacklist also has a wait when something tries to get something and it is empty. Lastly the logStatus also has a lock. 

Recovery works with the log. The first 1024 sectors are all part of hte log. The one right after that holds onto the log pointers. The first is the start of the log. This is where the first file that may not be on disk is. This can be moved when we know something is off the log. Also is the current location where there is no more log entries, ie garbage. When a commit happens this info get sent to disk. If the disk fails, it will look at the log and see what transactions are still there. If there are any, they are added to the WriteBackList and treated just like committed transactions.


4. Our testing strategy is to first test all the base aspects of ADisk. Each class is unit tested and every method to make sure that nothing suprising happens. This ended up being more then 1000 tests. Then the ADisk is run with several tests, first with one thread and then with others. We changed how we did the multithreaded version running up to 8 different threads. And each of these tests were run at least 100 times to make sure there was no deadlock. When an error was found the mistake was tracked down. 

We try a bunch of different stuff, including trying to open several files at once, renaming, moving structures, ensuring the corrent number of files stay inside a directory, etc.  Full tests require the disk to reformat to have a clean slate, so tests may run slow.
